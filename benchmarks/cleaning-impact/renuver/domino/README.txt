%%%%%%%%%%%%%%%%%%%%%% Folder organization %%%%%%%%%%%%%%%%%%%%%%

root
	CreateMatrix.jar       %JAR file of CreateMatrix
	Domino.jar             %JAR file of DOMINO
	DD.jar		       %JAR file of DD Algoritms

	datasets               %folder containing the datasets	
		matrices       %folder containing the matrices generated by CreateMatrix

	Domino		       
		log            %folder containing Domino's execution logs
		output         %folder containing Domino's results

	DD                     
		log            %folder containing DD's execution logs
		output         
		     BF        %folder containing BF's results
		     BU-Ne     %folder containing BU-Ne's results
		     IE-TD-Po  %folder containing IE-TD-Po's results


%%%%%%%%%%%%%%%%%%%%%%%%% Create Matrix %%%%%%%%%%%%%%%%%%%%%%%%%
It creates distance relations (Preprocessing phase) which are used by Domino and DD algorithms. 
It is mandatory to generate the distance relation used by the compared discovery algorithms. 
The distance relation is generated as CSV file and saved into a sub-folder of /datasets/matrices/ 
based on the input parameters.  

Parameters:

args0: 
An input CSV file (containing a relation instance) stored into the folder /datasets: "<nameFile.csv>" 

args1: 
A boolean value specifying whether the CSV file contains (true) or not (false) the header: "<header>"

args2: 
A textual value specifying the separator used into the CSV file: "<separator>"

args3:
A textual value specifying the symbol(s) used in the CSV file to represent null values: "<nullvalue>"

args4:
A boolean value enabling (true) or not (false) the log-step for grouping distance thresholds: "<log>"

args5:
A numeric value defining the maximum distance threshold for the discovery process: "<maxthr>"  
A "0" value represents the fact that no maximum threshold will be considered.

args6: 
A boolean value indicating whether to enable the use of the Levenshtein (true) or the q-grams (false) distance function for textual values: "<lev>" 

Example:

java -jar CreateMatrix.jar "iris.csv" "false" "," "?" "false" "4" "true"

It creates a distance matrix for the dataset iris.csv, which does not contain a header, uses the comma as separator, and contains the symbol '?' as null value. 
The matrix will be generated by setting a max distance threshold equals to '4' for all columns, and by considering the levenshtein distance as distance function for textual values.


%%%%%%%%%%%%%%%%%%%%%%%%%%%% DOMINO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
It implements the discovery phase of the Domino algorithm configured to discover the subset of RFDcs corresponding to the Differential Dependencies (DDs).
It uses a distance matrix created by CreateMatrix (stored into a sub-folder of /datasets/matrices/).
The discovered DDs will be saved as TXT file into /Domino/output/. Also, a log file will be saved into /Domino/log/.

Parameters:

args0: 
An input CSV file (containing a relation instance) stored into the folder /datasets: "<nameFile.csv>" 

args1: 
A boolean value specifying whether the CSV file contains (true) or not (false) the header: "<header>"

args2: 
A textual value specifying the separator used into the CSV file: "<separator>"

args3:
A textual value specifying the symbol(s) used in the CSV file to represent null values: "<nullvalue>"

args4:
A boolean value enabling (true) or not (false) the log-step for grouping distance thresholds: "<log>"

args5:
A numeric value defining the maximum distance threshold for the discovery process: "<maxthr>"  
A "0" value represents the fact that no maximum threshold will be considered. 

Example:

java -jar Domino.jar "iris.csv" "false" "," "?" "false" "4"

It discovers DDs for the dataset iris.csv, which does not contain a header, uses the comma as separator, and contains the symbol '?' as null value. 
It uses the matrix generated by setting a max distance threshold equals to '4'.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
It implements the three versions of the DD discovery algorithm recalled in the paper: 
Brute Force (BF), Buttom-up with negative pruning (BU-Ne), and Top-down with positive pruning and instance exclusion (IE-TD-Po). 
They discover Differential Dependencies (DDs) by associating 'maxThr'+1 differential functions to each column of the dataset. 
They use a distance matrix created by CreateMatrix and stored into a sub-folder of /datasets/matrices/. 
The discovered DDs are saved as TXT file into a folder of /DD/output/<version> according to the executed version. 
Also, a log file will be saved into /DD/log/.

Parameters:

args0: 
An input CSV file (containing a relation instance) stored into the folder /datasets: "<nameFile.csv>" 

args1:
A numeric value defining the maximum distance threshold for the discovery process: "<maxthr>"  

args2:
A nominal value defining the DD discovery version to be executed: "<version>". The possible values are:
- "0" to execute the BF version
- "1" to execute the BU-Ne version
- "2" to execute the IE-TD-Po version


Example:

java -jar DD.jar "iris.csv" "4" "0"

It discovers DDs for the dataset iris.csv by executing the BF version. 
It considers five differential functions into the range [0,4] for each dataset column, and 
uses the matrix generated by setting a max distance threshold equals to '4'.
